import { Program } from "./Program";
import { BufferManager } from "./BufferManager";
import { BufferGeometry } from "./BufferGeometry";
import { Object3D } from "./Object3D";
import { UniformManager } from "./UniformManager";
import { RenderSide } from "./Constants";
import { ProgramManager } from "./ProgramManager";
import { Geometry } from "./Geometry";
declare class RenderableElement extends Object3D {
    glProgram: WebGLProgram;
    program: Program;
    gl: WebGLRenderingContext;
    vertexNum: number;
    fragmentShader: string;
    vertexShader: string;
    uniforms: any;
    geometry: Geometry;
    bufferGeometry: BufferGeometry;
    bufferManager: BufferManager;
    uniformManager: UniformManager;
    programManager: ProgramManager;
    side: RenderSide;
    transparent: boolean;
    hasIndex: boolean;
    constructor(material?: any, geometry?: Geometry | BufferGeometry);
    getVertexNum(): number;
    getProgram(): WebGLProgram;
    update(gl: any, material?: any): void;
    updateBuffer(gl: any): void;
    updateUniforms(gl: any): void;
}
export { RenderableElement };
